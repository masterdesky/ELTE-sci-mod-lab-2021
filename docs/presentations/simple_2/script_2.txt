* title slide *
Hello everyone! I want to start with a small recap. My project is about the NEBULA detector. I'm studying the behaviour of the NEBULA detector, when it is bombarded with neutrons in a simulated environment. I'm supervised by Ákos Horváth in this nuclear physics topic.

* slide 1 *
Last time I've presented in front of you, I showed you my initially proposed roadmap for this project and what I want to achieve during this semester. I considered, that I'll use the software called smsimulator (I don't know, what the SM prefix to the word "simulator" means), but I know, that this software can be used to study the response of the NEBULA detector to a single or multiple neutrons with high accuracy. It has an accurate implementation of the NEBULA detector (and other detectors as well too), which can be utilized by using Geant4 as some kind of backend for smsimulator.

The problem is, that its installation is actually a nightmare, as the slide says too. So you know it requires the ROOT and ANAROOT applications (notorious softwares in nuclear- and particle physics). Smsimulator uses headers and libraries shipped along these two. But. After a lot of trial and error I traced back that smsimulator has some kind of compatibility issue with the current version of ROOT headers. (ROOT had actually big changes just recently.)

So my idea was to temporarily abort the smsimulator line in my project; I simply don't have time to try every ROOT version along the way. I don't think it worths it. If I have time at the end of the project, I'll try to set up smsimulator, but only after the mandatory parts of the project are ready and I have time besides writing my thesis and learning for the final exams.

So instead of smsimulator I've decided to implement a simplified version of the NEBULA detector, which is still good enough for approximate and acceptable results in general.

* slide 2 *
Let me tell you some words about actual technical steps I have to take during this project if I use only Geant4 as it was originally intended for this project by my supervisor. There are two main parts of a Geant4 simulation, which needs to be written by any user. The first one is the part, where we define the geometry of the detector, the environment and the general behaviour of the simulation at specific events. This is all done in a pure C++ environment using headers and libraries from Geant4. This is the longest and hardest part of the whole simulation. There are a plethora of different tools and usecases in Geant4, and the tutorials also won't hold the user's hands.
You have to have solid programming skills to understand easily and at first glance what you have to do here, even using the tutorials. So in my experience Geant4 has a relatively steep learning curve compared to other simulation softwares.

So this is the first main part. The second is much easier. After we have a complete and ready environment set up after the first part and we compiled a binary from that (yes we have to do this, compile an executable from our C++ code written in the first part), we can tell this created executable to do various tasks. Eg. to shot neutron on the created detector or visualize it in an OpenGL window, etc. We can write a lot of consecutive commands in a file, which is called as a Geant4 macro file, and they can be thus automatically executed any time. These are very much like bash command, so they can be reused from other simulations, and have very easy syntax. This is the easy part of the simulation.

Speaking about automation, setting up Geant4 and compiling simulations are really long. Simple bash files, which can be used to automate these steps are very useful, when using any kind of simualtion software. I concentrated on this aspect too during the last week.

slide 3 *
Finally, again I would like to say a few words about my progress made so far. I have advancements in two (or three) points in my roadmap. First I automated completely the first two steps, so I don't need to do them manually again. It was very useful during my trial-end-error attempts to solve various problems throughout the setup of smsimulator and Geant4.

Next, after I've sadly aborted the idea of using smsimulator, I've implmented a simplified version of the NEBULA detector in a pure Geant4 environment. For this, the thesis of Dávid Pesznyák from last year was very useful, since he worked on very similar problems using Geant4. This construct still can be improved, I'll look into that in the future. But for now I'll create some well-constructed macros to actually and finally use the implemented NEBULA detector to shot neutron at it and observe what's happening.

That's all I have for you today, so thank you for your attention!
